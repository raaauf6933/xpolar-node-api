interface Node {
  id: ID!
}

# Scalars
scalar DateTime
scalar Time
scalar Date
scalar Upload #File Upload
type Error {
  field: String
  message: String
}

type Pagination {
  page: Int
  limit: Int
}
type PaginationItems {
  from: Int
  to: Int
}

type PageInfo {
  next: Pagination
  previous: Pagination
  showing: PaginationItems
}

enum UserType {
  SUPER_ADMIN
  ADMIN
}

enum CaseBatchStatus {
  UPLOADING
  SUCCESS
  FAILED
}

enum CaseStatus {
  ALL
  IN_COLLECTION
  COLLECTION_FINISHED
}

enum CaseDepartment {
  ALL
  FIRST_COLLECTION
  SECOND_COLLECTION
  QUARANTINE
}

enum CommonStatus {
  ACT
  DEACT
}

enum OrderDirection {
  asc
  desc
}

type Client {
  id: ID!
  name: String
  code: Int
  status: CommonStatus
  createdAt: DateTime
  updatedAt: DateTime
}

type CaseBatch {
  id: ID!
  client: Client
  batchId: String
  batchReference: String
  assignmentStartDate: DateTime
  assignmentEndDate: DateTime
  status: CaseBatchStatus
  isDeleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  cases: [Case]
}

type Case {
  id: ID!
  caseReference: String
  caseUniqueBatchId: String
  clientReference: String
  caseBatch: CaseBatch
  person: Person
  isDeleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Person {
  id: ID!
  cases: Case
  firstName: String
  lastName: String
  birthDay: String
  gender: String
  address: [Address]
  contacs: [Contacts]
  isDeleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Address {
  id: ID!
  person: Person
  address: String
  city: String
  zipCode: String
  region: String
  isDeleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Contacts {
  id: ID!
  person: Person
  type: String
  contactValue: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClientCountableConnection {
  pageInfo: PageInfo!
  edges: [ClientCountableEdge!]!
  count: Int!
  totalCount: Int!
}

type CaseBatchesCountableConnection {
  pageInfo: PageInfo!
  edges: [CaseBatchesCountableEdge!]!
  count: Int!
  totalCount: Int!
}

type CasesCountableConnection {
  errors: [Error]
  pageInfo: PageInfo!
  edges: [CasesCountableEdge!]!
  count: Int!
  totalCount: Int!
}

type ClientCountableEdge {
  node: Client!
}

type CaseBatchesCountableEdge {
  node: CaseBatch!
}

type CasesCountableEdge {
  node: Case!
}

input createClientInput {
  name: String!
  code: Int!
  status: CommonStatus!
}

type CreateClient {
  errors: [Error]
  client: Client
}

input importCasesInput {
  client: ID!
  assignmentStartDate: Date!
  assignmentEndDate: Date!
}

input CaseBatchesSortingInput {
  direction: OrderDirection!
}

input CasesSortingInput {
  direction: OrderDirection!
}

input CasesFilterInput {
  batchNumber: String
  firstName: String
  lastName: String
  status: String
  clientReference: String
  department: String
  birthDate: String
  debtorId: String
}

type ImportCases {
  errors: [Error]
  caseBatch: CaseBatch
}

type Query {
  cases(
    page: Int!
    limit: Int!
    sortBy: CasesSortingInput
    filter: CasesFilterInput
  ): CasesCountableConnection
  case(id: ID!): Case
  clients(page: Int!, limit: Int!): ClientCountableConnection
  caseBatches(
    page: Int!
    limit: Int!
    sortBy: CaseBatchesSortingInput
  ): CaseBatchesCountableConnection
}

type Mutation {
  createClient(input: createClientInput!): CreateClient
  importCases(input: importCasesInput!, file: Upload): ImportCases
}
